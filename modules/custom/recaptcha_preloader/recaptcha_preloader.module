<?php

/**
 * @file
 * Provide preloader for Google reCAPTCHA.
 */

use Drupal\Core\Asset\AttachedAssets;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_form_alter().
 */
function recaptcha_preloader_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    \Drupal::config('recaptcha_preloader.settings')->get('use') &&
    \Drupal::config('recaptcha.settings')->get('widget.size') !== 'invisible' &&
    !$form_state->getUserInput()
  ) {
    $types = ['recaptcha_preloader/reCAPTCHA with preloader'];
    $default = \Drupal::config('captcha.settings')->get('default_challenge');

    if ($default === $types[0]) {
      $types[] = 'default';
    }

    $entities = \Drupal::entityTypeManager()->getStorage('captcha_point')
      ->loadByProperties([
        'status' => TRUE,
        'formId' => $form_id,
        'captchaType' => $types,
      ]);

    if ($entities) {
      \Drupal::service('recaptcha_preloader.helper')->search($form);
    }
  }
}

/**
 * Implements hook_captcha().
 */
function recaptcha_preloader_captcha($op, $captcha_type = '') {
  $type = 'reCAPTCHA with preloader';

  switch ($op) {
    case 'list':
      return [$type];

    case 'generate':
      if ($captcha_type !== $type) {
        break;
      }

      $captcha = recaptcha_captcha('generate', 'reCAPTCHA');
      $recaptcha_config = \Drupal::config('recaptcha.settings');
      $config = \Drupal::config('recaptcha_preloader.settings');

      if (!(
        isset($captcha['form']['recaptcha_widget']) &&
        !$recaptcha_config->get('widget.noscript') &&
        $recaptcha_config->get('widget.size') !== 'invisible' &&
        $config->get('use')
      )) {
        return $captcha;
      }

      $assets = AttachedAssets::createFromRenderArray([
        '#attached' => [
          'library' => [
            'recaptcha_preloader/connector',
          ],
        ],
      ]);

      /** @var \Drupal\Core\Asset\AssetResolverInterface $service */
      $service = \Drupal::service('asset.resolver');

      $assets = [
        'css' => [
          $service->getCssAssets($assets, FALSE),
        ],
        'js' => $service->getJsAssets($assets, FALSE),
      ];

      $fields = [
        'css' => [
          'tag' => 'link',
          'attribute' => 'href',
          'attributes' => [
            'rel' => 'stylesheet',
            'type' => 'text/css',
          ],
        ],
        'js' => [
          'tag' => 'script',
          'attribute' => 'src',
          'attributes' => [
            'async' => TRUE,
            'defer' => TRUE,
          ],
        ],
      ];

      $widget = &$captcha['form']['recaptcha_widget'];
      $widget['#attached']['html_head'] = [];
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

      foreach ($assets as $type => $group) {
        $id = 1;

        foreach ($group as $items) {
          foreach ($items as $item) {
            $url = $item['data'];

            if ($item['type'] === 'external') {
              $url .= '&hl=' . $langcode;
            }
            else {
              $url = '/' . $url;
            }

            $widget['#attached']['html_head'][] = [
              [
                '#tag' => $fields[$type]['tag'],
                '#attributes' => [
                  $fields[$type]['attribute'] => $url,
                ] + $fields[$type]['attributes'],
              ],
              'recaptcha_preloader_' . $type . '_' . ($id++),
            ];
          }
        }
      }

      $attributes = [
        'class' => [
          'g-recaptcha-wrapper',
          $recaptcha_config->get('widget.size') ? 'compact' : 'default',
          'loading',
        ],
      ];

      $widget['#prefix'] = '<div' . new Attribute($attributes) . '>';

      if ($message = $config->get('message')) {
        if ($config->get('appearance')) {
          $theme = $recaptcha_config->get('widget.theme');

          if (!$theme) {
            $theme = 'light';
          }

          $attributes = [
            'class' => [
              'g-recaptcha-message',
              $theme,
            ],
          ];

          if (!isset($widget['#suffix'])) {
            $widget['#suffix'] = '';
          }

          $widget['#suffix'] .= '<div' . new Attribute($attributes) . '>';
          $widget['#suffix'] .= $message;
          $widget['#suffix'] .= '</div>';
        }
        else {
          $widget['#markup'] = substr($widget['#markup'], 0, -6) . $message . substr($widget['#markup'], -6);
        }
      }

      $widget['#suffix'] .= '</div>';

      return $captcha;
  }
}
